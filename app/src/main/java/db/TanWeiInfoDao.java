package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.quitter.quitter.dao.TanWeiInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAN_WEI_INFO".
*/
public class TanWeiInfoDao extends AbstractDao<TanWeiInfo, String> {

    public static final String TABLENAME = "TAN_WEI_INFO";

    /**
     * Properties of entity TanWeiInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TanWeiInfo_List = new Property(0, byte[].class, "tanWeiInfo_List", false, "TAN_WEI_INFO__LIST");
        public final static Property OrderId = new Property(1, String.class, "orderId", true, "ORDER_ID");
    }


    public TanWeiInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TanWeiInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAN_WEI_INFO\" (" + //
                "\"TAN_WEI_INFO__LIST\" BLOB," + // 0: tanWeiInfo_List
                "\"ORDER_ID\" TEXT PRIMARY KEY NOT NULL );"); // 1: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAN_WEI_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TanWeiInfo entity) {
        stmt.clearBindings();
 
        byte[] tanWeiInfo_List = entity.getTanWeiInfo_List();
        if (tanWeiInfo_List != null) {
            stmt.bindBlob(1, tanWeiInfo_List);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TanWeiInfo entity) {
        stmt.clearBindings();
 
        byte[] tanWeiInfo_List = entity.getTanWeiInfo_List();
        if (tanWeiInfo_List != null) {
            stmt.bindBlob(1, tanWeiInfo_List);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public TanWeiInfo readEntity(Cursor cursor, int offset) {
        TanWeiInfo entity = new TanWeiInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0), // tanWeiInfo_List
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // orderId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TanWeiInfo entity, int offset) {
        entity.setTanWeiInfo_List(cursor.isNull(offset + 0) ? null : cursor.getBlob(offset + 0));
        entity.setOrderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TanWeiInfo entity, long rowId) {
        return entity.getOrderId();
    }
    
    @Override
    public String getKey(TanWeiInfo entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TanWeiInfo entity) {
        return entity.getOrderId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
